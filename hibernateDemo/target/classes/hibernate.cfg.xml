<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE hibernate-configuration PUBLIC
"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
	<session-factory>
			<!-- Database connection settings -->
			<property name="connection.driver_class">com.mysql.jdbc.Driver</property>
			<property name="connection.url">jdbc:mysql:///demo1</property>
			<property name="connection.username">root</property>
			<property name="connection.password">123456</property>
			
			<!-- JDBC connection pool (use the built-in) -->
			<property name="connection.pool_size">1</property>
			<!-- SQL dialect -->
			<property name="dialect">org.hibernate.dialect.MySQL5InnoDBDialect</property>
			<!-- Enable Hibernate's automatic session context management -->
			<property name="current_session_context_class">thread</property>
			<!-- Disable the second-level cache -->
			<property name="cache.provider_class">org.hibernate.cache.NoCacheProvider</property>
			<!-- Echo all executed SQL to stdout -->
			<property name="show_sql">true</property>
			
			<!-- 
					create：每次加载hibernate时都会删除上一次的生成的表，然后根据你的model类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。
					create-drop ：每次加载hibernate时根据model类生成表，但是sessionFactory一关闭,表就自动删除。
					update：最常用的属性，第一次加载hibernate时根据model类会自动建立起表的结构（前提是先建立好数据库），以后加载hibernate时根据 model类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等 应用第一次运行起来后才会。
					validate ：每次加载hibernate时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。
			 -->
			<property name="hbm2ddl.auto">create</property>	
			<!-- Mapping
			
			<mapping resource="com/demo/ex01/entity/Event.hbm.xml"/>
			 -->
			<mapping class="com.dome.hibernateDemo.User"/>
	</session-factory>
</hibernate-configuration>
